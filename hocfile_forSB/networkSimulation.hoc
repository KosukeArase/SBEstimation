//*************************
// networkSimulation.hoc
// 2012/02/11
// Yusuke Mori
//*************************

//--- for debug ---
debugon = 0
if (debugon) {
    print "debug mode"
}

//--- parallel ----
objref pc
pc = new ParallelContext()

//--- define cell classes ---
{load_file("./ParaCellSwc.hoc")}

//--- for save ---
objref allvm
allvm = new Vector()

//------------------------------
// make cells
// (code is in ParaCellSwc.hoc)
p_mkcells("./list/neuronlist.txt", 0)

proc minimumnetstim(){ local i, j  localobj namesf strdef tmp
    namesf = new StringFunctions()

    for(i = 0; i < cells.count(); i += 1){
	tmp = cellnames.o(i).s
	//print tmp
	
	//p_mkstim_ic(26, 30, 1, 300, 0)
	for(j=0;j<10;j+=5){
	    p_mkstim_ic(j, 30, 1, 300, 0)
	}
	if(namesf.substr(tmp, "orn") != -1){
	    p_mkstim_ic(pc.nhost * i + pc.id, 500, 1, 200, 0)
	    print  pc.nhost * i + pc.id
	}
    }
}
minimumnetstim()

proc mknetPos(){ local tmp
    for (i=0; i < NCELLS; i+=1){
	tmp = int(i / 5)
	p_translation( i , tmp * 100, tmp * 100, tmp * 100)
    }
}

mknetPos()

//------------------------------

//------------------------------
// make channels
//

forall {
    Ra = 50
}

forall insert hh

//------------------------------

//------------------------------
// Chemical Synapse and Gap Junction (Electrical Synapse)
// (code is in ParaCellSwc.hoc)

{load_file("./readSynList.hoc")}
{load_file("./importSynList.hoc")}

//------------------------------

func numchild() { local ii localobj sl
    ii = 0
    sl = new SectionList()
    sl.children()
    forsec sl {
	ii += 1
    }
    return ii
}

//------------------------------
// zapping
//

{load_file("./zapping.hoc")}
zapping(zapdegree)

double zaplen[cells.count + 1] // + 1 is for pc.id with cell.count = 0
for j = 0, cells.count - 1 {
    zaplen[j] = 0
    forsec zaplist[j] {
	zaplen[j] += 1
    }
}


//------------------------------

//------------------------------
// step
//
objref fv
fv = new File()
strdef filename
strdef command

objref sh
if (debugon) {
    sh = new PlotShape(1)
    sh.scale(0,0)
    
    sh.exec_menu("Shape Plot")
    
    nframe = 0
}

tstop = 300
if(debugon) {tstop = 0.01}
dt = 0.01          // number of calculation
nstep_steprun = 1   // number of steps

saveframe = 0

proc pstep() { local i, j
    for i = 1, nstep_steprun {
	fadvance() // include : t = t + dt
	
    }
    // check
    if ( t/dt % 10 == 0) {printf(".")}
    // save step
    // if (1) {
    // 	saveframe = saveframe + 1
    // 	for j = 0, cells.count - 1 {
    // 	    sprint(filename, "values/%s_zap%d_%04d.val", cellnames.object[j].s, zapdegree, saveframe)
    // 	    //fv.wopen(filename)
	    
    // 	    allvm.resize(zaplen[j])
	    
    // 	    ii = 0
    // 	    forsec zaplist[j] {
    // 		allvm.set(ii,v(.5))
    // 		ii += 1

    // 	    }
    // 	    //allvm.vwrite(fv, 3)
    // 	    //fv.flush()
    // 	    //fv.close()
    // 	}
    // }
    // if (debugon) { sh.flush() }  
}

//------------------------------



// involved to evolutionary computation section

DIM_CMAES = NCELLS * NCELLS
NUM_OF_POP_PER_PROCS = 16 //redefine by MPI_Bcast from parent C process

recordBin = 50 //default 125 in single compartment implementation
numFitLoop = tstop / recordBin
objref fittingVec
fittingVec = new Vector(numFitLoop - 1)

HIGH_F = 80
LOW_F = 24
F_FLIP = HIGH_F + LOW_F //for evaluate output2's flip F (toward output1's)

for index = 0, fittingVec.size()-1 {
    if(index%5 == 0 || index%5==1){
	fittingVec.x(index) = HIGH_F
    }else if(index%5==3 || index%5==4){
	fittingVec.x(index) = LOW_F
    }else{
	fittingVec.x(index) = (HIGH_F + LOW_F) / 2
    }
}

fittingVec.x(0) = 4
fittingVec.x(1) = 4
fittingVec.x(2) = 4
fittingVec.x(3) = 8
fittingVec.x(4) = 8

load_file("./record.hoc") //TODO: copy and modify!

func receiveInfoAndPassData() { local root, num_of_pop_per_split localobj vec
    root = 0
    vec = new Vector(3)
    pc.broadcast(vec, root)
    num_of_pop_per_split = int(vec.x(0))
    return num_of_pop_per_split
}

//TODO: modify cell_id that is the target of evaluation!!
//TODO: also change the index in record.hoc
func evalFitness(){ local sum, scaleFactor, n, i, tmpFreq localobj hoge
    //define fitness function. under construction
    sum = 0.0
    scaleFactor = 0.3 //temporarily
    
    // calc the fitness here under construction
    if(pc.gid_exists(32)){// temporary set 0
	for i = 0, fittingVec.size() - 1  {
	    tmpFreq = getFreq(recordBin * i, recordBin * 2)//250ms bin overlapped each 125ms
	    //printf("freq(%d ~ %d) is %d\t", recordBin * i, recordBin * (i+1), tmpFreq)
	    sum += (tmpFreq - fittingVec.x(i)) * (tmpFreq - fittingVec.x(i))
	}
	//printf("\n")
    }
    
    return sum * scaleFactor
}

func evalFitness2(){ local sum, scaleFactor, n, i, tmpFreq localobj hoge
    //define fitness function. under construction
    sum = 0.0
    scaleFactor = 0.3 //temporarily
    
    // calc the fitness here under construction
    if(pc.gid_exists(1)){// temporary set 1
	for i = 0, fittingVec.size() - 1  {
	    tmpFreq = getFreq2(recordBin * i, recordBin * 2)//250ms bin overlapped each 125ms
	    //printf("freq(%d ~ %d) is %d\t", recordBin * i, recordBin * (i+1), tmpFreq)
	    sum += (tmpFreq + fittingVec.x(i) - F_FLIP) * (tmpFreq + fittingVec.x(i) - F_FLIP)
	}
	//printf("\n")
    }
    
    return sum * scaleFactor
}

//TODO: redifine the output_id (which cell is output) in main too!!

func detectOutputProc(){local i, proc_id, num_cell, div, nhost, output_cell_number
    num_cell = $1
    nhost = $2
    output_cell_number = $3
    if(num_cell <= nhost){
	proc_id = output_cell_number
	return proc_id
    }else{
	div = int((output_cell_number / nhost))
	proc_id = num_cell - div * nhost - 1
	return proc_id
    }
}
//needless?
func detectOutputProc2(){local i, proc_id, num_cell, div, nhost
    num_cell = $1
    nhost = $2
    if((num_cell / 2) < nhost){
	proc_id = 1//num_cell / 2
	return proc_id
    }else{
	div = int((num_cell / 2) / nhost)
	proc_id = num_cell/2 - div * nhost
	return proc_id
    }
}

//update NetCon weight of Chemi synpases

objref update_test_vec
update_test_vec = new Vector(NCELLS*NCELLS)
for i=0, NCELLS*NCELLS-1{
    update_test_vec.x(i) = i
}

objref test_vec_scatter
genes = 1
test_vec_scatter = new Vector(NCELLS * cells.count * genes)
for i=0, NCELLS*cells.count*genes -1{
    test_vec_scatter.x(i) = i + pc.id * NCELLS * cells.count * genes
//    printf("test_vec.x(%d) is %g\n", i, test_vec_scatter.x(i))
}

// assume that informed by scater (x,x,x,x,x,0,0,0,0,0,0,0,0)
proc update_weight(){local i, j, syn_count, cell_count, start_idx localobj update_vec
    update_vec = $o1
    start_idx = $2
    // debug print
    // // printf("my id = %d, i have %d cells\n", pc.id, cells.count)
    // for i=0, NCELLS - 1 {
    // 	for j=0, NCELLS-1{
    // 	    printf("%dsynapse_num_mat.x[%d][%d] = %d  ", pc.id, i, j, num_synapse_mat.x[i][j])
    // 	}
    // 	printf("\n")
    // }
    // for i=0, nclist_chemi.count -1{
    // 	printf("nclist_chemi.o(%d).weight is %lf\n", i, nclist_chemi.o(i).weight)
    // }
    // printf("update_vec size is %d\n", update_vec.size())
    // printf("nclist_chemi size is %d\n", nclist_chemi.count)
    // printf("NCELLS =%d, cells.count = %d\n", NCELLS, cells.count)
    syn_count = 0
    cell_count = 0
    for i=0, update_vec.size()-1{
	printf("(%dth proc) update_vec.x(%d) = %lf\n", pc.id, i, update_vec.x(i))
    }
    
    for i=0, NCELLS - 1{
	if(pc.gid_exists(i)){
	    for j=0, NCELLS - 1{
		if(num_synapse_mat.x[i][j] != 0){
		    for k=0, num_synapse_mat.x[i][j] - 1{
			// if(syn_count >= nclist_chemi.count){
			//     printf("syn_count(%d) information error @(pc.id=%d)\n", syn_count, pc.id)
			//     for(l=0;l<NCELLS;l+=1){
			// 	printf("%dnum_synnapse.x[%d][%d]= %d\n", pc.id, i, l, num_synapse_mat.x[i][l])
			//     }
			//     printf("\n")
			// }
			// if(start_idx*NCELLS*cells.count+cell_count*NCELLS+j > update_vec.size()){
			//     printf("update vec size error\n")
			// }
			nclist_chemi.o(syn_count).weight = update_vec.x(start_idx*NCELLS*cells.count+cell_count*NCELLS+j)
			syn_count += 1
		    }
		}
	    }
	    cell_count += 1
	}
    }
}

proc execSimulation(){ local i, root, fitness, tempfit, flg_cmaes_terminate, num_of_pop_per_procs, dim_cmaes, num_of_targetfile, timestep, log_fitness, output_id, output_id2, start_timing, loop_counter, elapse_time localobj rcv_pop_vec_weight, rcv_pop_vec_delay, send_fit_vec, nullvec, tempvec, vec, send_fit_vec2
    
    num_of_pop_per_procs = $1
    dim_cmaes = $2
    num_of_targetfile = $3
    timestep = $4
    log_fitness = $5
    
    {pc.set_parent_comm()}
    
    //{receiveInfo()}
    num_of_pop_per_procs = receiveInfoAndPassData()
    
    root = 0
    nullvec = new Vector()
    tempvec = new Vector()
    
    {pc.set_world_comm()}
    {pc.barrier()}
    
    //kore iruka??
    //vec = readParamFile()
    //updateParams_tmp(vec)
    
    //TODO: reset arg[3]
    output_id = detectOutputProc(NCELLS, pc.nhost, 32)
    output_id2 = detectOutputProc(NCELLS, pc.nhost, 1)
    printf("output_id = %d, output_id2 = %d\n", output_id, output_id2)

    {pc.set_maxstep(10)}
    {finitialize(v_init)}
    {fcurrent()}
    {stdinit()}
    //setNetStimTest(NCELL)
    
    loop_counter = 0
    
    while(1){
	elapse_time = startsw()
	loop_counter = loop_counter + 1
	{pc.set_parent_comm()}
	
	rcv_pop_vec_weight = new Vector()
	rcv_pop_vec_delay = new Vector()
	send_fit_vec = new Vector(num_of_pop_per_procs)
	send_fit_vec2 = new Vector(num_of_pop_per_procs)
	
	//printf("num_of_pop_per_procs in execSimulation (in hocfile) is %d\n", num_of_pop_per_procs)
	//recieve weight data
	pc.scatter_d(nullvec, rcv_pop_vec_weight, dim_cmaes * num_of_pop_per_procs, root)
	//recieve delay data
	elapse_time = startsw() - elapse_time
	if(pc.id==0){
	    printf("%dth elapse time of scatter time in NEURON procs is %lf\n", loop_counter, elapse_time)
	}
	
	
	{pc.set_world_comm()}
	elapse_time = startsw()
	//the number of loop = the number of particle this process has..
	for(i=0; i<num_of_pop_per_procs; i+=1){
	    
	    fitness = 0.0
	    //updateParams(rcv_pop_vec)
	    //updateParams2(rcv_pop_vec_weight, rcv_pop_vec_delay, i * dim_cmaes)
	    update_weight(rcv_pop_vec_weight, i)
	    //setStimShort(NCELL, timestep, 100, 10)
	    //initModel
	    pc.barrier()
	    //printf("start psolove (%d times)\n",start_timing)
	    
	    // set to all the cells and i can get information of all cells
	    {setSpikeRecord(NCELLS)}
	    
	    stdinit()
	    
	    
	    //TODO: need to change
	    //	    pc.psolve(timestep)//timestep = tstop in original file
	    prun()

	    tempfit = evalFitness()
//	    tempfit += evalFitness2()
	    //if fitness converted to log_fitness, write here like below
	    if(log_fitness == 1){
		if(tempfit == 0){
		    tempfit = -1e100
		}else{
		    tempfit = log10(tempfit)
		}
	    }
	    fitness += tempfit
	    
	    send_fit_vec.x(i) = fitness
	    send_fit_vec2.x(i) = fitness
	}
	pc.broadcast(send_fit_vec, output_id)
	pc.broadcast(send_fit_vec2, output_id2)
	
	if(output_id!=output_id2){
	    for(i=0; i<num_of_pop_per_procs; i+=1){
		send_fit_vec.x(i) += send_fit_vec2.x(i)
	    }
	}
	
	for(i=0; i<num_of_pop_per_procs; i+=1){
	    printf("(%d proc)send_fit_vec.x(%d) = %lf\n", pc.id, i, send_fit_vec.x(i))
	}
	
	elapse_time = startsw() - elapse_time
	if(pc.id==0){
	    printf("%dth elapse time of main NEURON procs is %lf\n", loop_counter, elapse_time)
	}
	{pc.set_parent_comm()}
	elapse_time = startsw()
	pc.gather_d(send_fit_vec, nullvec, num_of_pop_per_procs, root)
	elapse_time = startsw() - elapse_time
	if(pc.id==0){
	    printf("%dth elapse time of gather in NEURON procs is %lf\n", loop_counter, elapse_time)
	}
	
	//check whether terminal criterion of cmaes holds
	elapse_time = startsw()
	pc.broadcast(tempvec, root)
	elapse_time = startsw() - elapse_time
	if(pc.id==0 && loop_counter==4){
	    printf("elapse time of bcast in NEURON procs is %lf\n", elapse_time)
	}
	
	flg_cmaes_terminate = int(tempvec.x(0))
	//flg_cmaes_termination = 1 //for break test, inevitably breaking the loop
	if(flg_cmaes_terminate != 0) {break}
	//printf("I dont still break (%d times)\n", loop_counter)
    }
}


//------------------------------
// parallel simulation control 
//
load_file("./CellSwc2.hoc")
proc pcontinue() {local time, timestep, i strdef recfilename
    // while(t < tstop){
    // 	pstep()
    // }
    timestep = dt * 40
    for(time=0;time<tstop;time+=timestep){
	pc.psolve(time+timestep)
	pc.barrier()
	// for(i=0;i<cells.count;i+=1){
	//     sprint(recfilename, "./%dCell_t_%.6f.dat", pc.id + i * pc.nhost, t)
	//     cells.o(i).saveData(recfilename)
	//}
    }
}

proc prun() {
    init()
    pcontinue()
}

elapse_time = startsw()
//prun()
{execSimulation(NUM_OF_POP_PER_PROCS, DIM_CMAES / pc.nhost, 0, tstop, 0)}
elapse_time = startsw() - elapse_time
printf("elapse time is %g\n", elapse_time)
//------------------------------
{pc.runworker()}

if (!debugon) {
    {pc.done()}    
    //quit()
}